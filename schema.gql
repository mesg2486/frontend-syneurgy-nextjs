type Chapter {
  moduleId: ID!
  module: Module!
  id: ID!
  title: String!
  order: Int!
  type: String
  content: String!
  createdAt: String!
  updatedAt: String!
}

type ChapterConnection {
  items: [Chapter]
  nextToken: String
}

type Course {
  id: ID!
  title: String!
  thumbnail: String!
  content: String!
  description: String!
  feedback: [Feedback!]
  modules: [Module!]
  instructorId: ID!
  instructor: User!
  wysbtc: [String!]
  about: String!
  price: Int
  rating: Float
  isUserEnrolled(userId: ID!): Boolean!
  moreFromInstructor: [Course]
}

type CourseConnection {
  items: [Course]
  nextToken: String
}

input CreateChapterInput {
  moduleId: ID!
  title: String!
  order: Int!
  type: String
  content: String!
}

input CreateCourseInput {
  title: String!
  thumbnail: String!
  content: String!
  instructorId: ID!
  wysbtc: [String!]
  description: String!
  about: String!
  price: Int
  rating: Float
}

input CreateEnrollmentInput {
  courseId: ID!
  userId: ID!
}

input CreateFeedbackInput {
  id: ID!
  authorId: ID!
  note: String
  rating: Int!
  courseId: ID!
}

input CreateModuleInput {
  order: Int!
  courseId: ID!
  title: String!
  content: String!
}

input CreateUserInput {
  createdAt: String!
  sub: String!
  about: String
  name: String
  gender: String
  email: String!
  avatar: String
  cover: String
}

input DeleteChapterInput {
  moduleId: ID!
  order: Int!
}

input DeleteCourseInput {
  id: ID!
}

input DeleteEnrollmentInput {
  courseId: ID!
}

input DeleteFeedbackInput {
  id: ID!
  courseId: ID!
}

input DeleteModuleInput {
  courseId: ID!
}

input DeleteUserInput {
  createdAt: String!
}

type Enrollment {
  courseId: ID!
  userId: ID!
  createdAt: String!
  course: Course!
}

type EnrollmentConnection {
  items: [Enrollment]
  nextToken: String
}

type Feedback {
  id: ID!
  authorId: ID!
  note: String
  rating: Int!
  courseId: ID!
}

type FeedbackConnection {
  items: [Feedback]
  nextToken: String
}

input ModelSizeInput {
  ne: Int
  eq: Int
  le: Int
  lt: Int
  ge: Int
  gt: Int
  between: [Int]
}

type Module {
  courseId: ID!
  id: ID!
  title: String!
  content: String!
  createdAt: String!
  updatedAt: String!
  chapters: [Chapter!]
}

type ModuleConnection {
  items: [Module]
  nextToken: String
}

input TableBooleanFilterInput {
  ne: Boolean
  eq: Boolean
  attributeExists: Boolean
}

input TableChapterFilterInput {
  moduleId: TableIDFilterInput
  id: TableIDFilterInput
  title: TableStringFilterInput
  order: TableIntFilterInput
  type: TableStringFilterInput
  content: TableStringFilterInput
  createdAt: TableStringFilterInput
  updatedAt: TableStringFilterInput
}

input TableCourseFilterInput {
  id: TableIDFilterInput
  title: TableStringFilterInput
  thumbnail: TableStringFilterInput
  content: TableStringFilterInput
  description: TableStringFilterInput
  about: TableStringFilterInput
  price: TableIntFilterInput
  rating: TableFloatFilterInput
}

input TableEnrollmentFilterInput {
  courseId: TableIDFilterInput
  userId: TableIDFilterInput
}

input TableFeedbackFilterInput {
  id: TableIDFilterInput
  authorId: TableIDFilterInput
  note: TableStringFilterInput
  rating: TableIntFilterInput
  courseId: TableIDFilterInput
}

input TableFloatFilterInput {
  ne: Float
  eq: Float
  le: Float
  lt: Float
  ge: Float
  gt: Float
  between: [Float]
  attributeExists: Boolean
}

input TableIDFilterInput {
  ne: ID
  eq: ID
  le: ID
  lt: ID
  ge: ID
  gt: ID
  contains: ID
  notContains: ID
  between: [ID]
  beginsWith: ID
  attributeExists: Boolean
  size: ModelSizeInput
}

input TableIntFilterInput {
  ne: Int
  eq: Int
  le: Int
  lt: Int
  ge: Int
  gt: Int
  between: [Int]
  attributeExists: Boolean
}

input TableModuleFilterInput {
  courseId: TableIDFilterInput
  id: TableIDFilterInput
  title: TableStringFilterInput
  content: TableStringFilterInput
  createdAt: TableStringFilterInput
  updatedAt: TableStringFilterInput
}

input TableStringFilterInput {
  ne: String
  eq: String
  le: String
  lt: String
  ge: String
  gt: String
  contains: String
  notContains: String
  between: [String]
  beginsWith: String
  attributeExists: Boolean
  size: ModelSizeInput
}

input TableUserFilterInput {
  createdAt: TableStringFilterInput
  sub: TableStringFilterInput
  about: TableStringFilterInput
  name: TableStringFilterInput
  gender: TableStringFilterInput
  email: TableStringFilterInput
  avatar: TableStringFilterInput
  cover: TableStringFilterInput
}

input UpdateChapterInput {
  moduleId: ID!
  id: ID
  title: String
  order: Int!
  type: String
  content: String
  createdAt: String
  updatedAt: String
}

input UpdateCourseInput {
  id: ID!
  title: String
  thumbnail: String
  content: String
  wysbtc: [String!]
  description: String
  about: String
  price: Int
  rating: Float
}

input UpdateEnrollmentInput {
  courseId: ID!
  userId: ID
}

input UpdateFeedbackInput {
  id: ID!
  authorId: ID
  note: String
  rating: Int
  courseId: ID!
}

input UpdateModuleInput {
  courseId: ID!
  id: ID
  title: String
  content: String
  createdAt: String
  updatedAt: String
}

input UpdateUserInput {
  sub: String!
  about: String
  name: String
  gender: String
  avatar: String
  cover: String
  twitter: String
}

type User {
  createdAt: String!
  sub: String!
  about: String
  name: String
  gender: String
  email: String!
  avatar: String
  cover: String
  twitter: String
}

type UserConnection {
  items: [User]
  nextToken: String
}

type Mutation {
  createUser(input: CreateUserInput!): User
  updateUser(input: UpdateUserInput!): User
  deleteUser(input: DeleteUserInput!): User
  createModule(input: CreateModuleInput!): Module
  updateModule(input: UpdateModuleInput!): Module
  deleteModule(input: DeleteModuleInput!): Module
  createFeedback(input: CreateFeedbackInput!): Feedback
  updateFeedback(input: UpdateFeedbackInput!): Feedback
  deleteFeedback(input: DeleteFeedbackInput!): Feedback
  createCourse(input: CreateCourseInput!): Course
  updateCourse(input: UpdateCourseInput!): Course
  deleteCourse(input: DeleteCourseInput!): Course
  createChapter(input: CreateChapterInput!): Chapter
  updateChapter(input: UpdateChapterInput!): Chapter
  deleteChapter(input: DeleteChapterInput!): Chapter
  createEnrollment(input: CreateEnrollmentInput!): Enrollment
  updateEnrollment(input: UpdateEnrollmentInput!): Enrollment
  deleteEnrollment(input: DeleteEnrollmentInput!): Enrollment
}

type Query {
  getUser(sub: String!): User
  listUsers(
    filter: TableUserFilterInput
    limit: Int
    nextToken: String
  ): UserConnection
  getModule(courseId: ID!): Module
  getModuleById(moduleId: ID!): Module
  listModules(
    filter: TableModuleFilterInput
    limit: Int
    nextToken: String
  ): ModuleConnection
  getFeedback(courseId: ID!, id: ID!): Feedback
  listFeedbacks(
    filter: TableFeedbackFilterInput
    limit: Int
    nextToken: String
  ): FeedbackConnection
  getCourse(id: ID!): Course
  listCourses(
    filter: TableCourseFilterInput
    limit: Int
    nextToken: String
  ): CourseConnection
  getChapter(moduleId: ID!, order: Int!): Chapter
  getChapterById(id: ID!): Chapter!
  listChapters(
    filter: TableChapterFilterInput
    limit: Int
    nextToken: String
  ): ChapterConnection
  getEnrollment(courseId: ID!): Enrollment
  listEnrollments(
    filter: TableEnrollmentFilterInput
    limit: Int
    nextToken: String
  ): EnrollmentConnection
  listUserEnrollments(userId: ID!): EnrollmentConnection
  listCoursesByInstructorId(instructorId: ID!): CourseConnection
}

type Subscription {
  onCreateModule(
    courseId: ID
    id: ID
    title: String
    content: String
    createdAt: String
  ): Module @aws_subscribe(mutations: ["createModule"])
  onUpdateModule(
    courseId: ID
    id: ID
    title: String
    content: String
    createdAt: String
  ): Module @aws_subscribe(mutations: ["updateModule"])
  onDeleteModule(
    courseId: ID
    id: ID
    title: String
    content: String
    createdAt: String
  ): Module @aws_subscribe(mutations: ["deleteModule"])
  onCreateFeedback(
    id: ID
    authorId: ID
    note: String
    rating: Int
    courseId: ID
  ): Feedback @aws_subscribe(mutations: ["createFeedback"])
  onUpdateFeedback(
    id: ID
    authorId: ID
    note: String
    rating: Int
    courseId: ID
  ): Feedback @aws_subscribe(mutations: ["updateFeedback"])
  onDeleteFeedback(
    id: ID
    authorId: ID
    note: String
    rating: Int
    courseId: ID
  ): Feedback @aws_subscribe(mutations: ["deleteFeedback"])
  onCreateCourse(
    id: ID
    title: String
    thumbnail: String
    content: String
    description: String
  ): Course @aws_subscribe(mutations: ["createCourse"])
  onUpdateCourse(
    id: ID
    title: String
    thumbnail: String
    content: String
    description: String
  ): Course @aws_subscribe(mutations: ["updateCourse"])
  onDeleteCourse(
    id: ID
    title: String
    thumbnail: String
    content: String
    description: String
  ): Course @aws_subscribe(mutations: ["deleteCourse"])
  onCreateChapter(
    moduleId: ID
    id: ID
    title: String
    order: Int
    type: String
  ): Chapter @aws_subscribe(mutations: ["createChapter"])
  onUpdateChapter(
    moduleId: ID
    id: ID
    title: String
    order: Int
    type: String
  ): Chapter @aws_subscribe(mutations: ["updateChapter"])
  onDeleteChapter(
    moduleId: ID
    id: ID
    title: String
    order: Int
    type: String
  ): Chapter @aws_subscribe(mutations: ["deleteChapter"])
  onCreateEnrollment(courseId: ID, userId: ID): Enrollment
    @aws_subscribe(mutations: ["createEnrollment"])
  onUpdateEnrollment(courseId: ID, userId: ID): Enrollment
    @aws_subscribe(mutations: ["updateEnrollment"])
  onDeleteEnrollment(courseId: ID, userId: ID): Enrollment
    @aws_subscribe(mutations: ["deleteEnrollment"])
}
