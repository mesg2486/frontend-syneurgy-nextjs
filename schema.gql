input CreateInvitationsInput {
  email: String!
  message: String
  invited: Boolean!
}

input CreateMeetingInput {
  name: String!
  synchrony: String
  dimensions: String
  performance: String
  sentiment: String
  highlights: String
  url: String!
  thumbnail: String
  type: String!
  userId: String!
  teamId: String!
  date: String!
}

input CreateTeamInput {
  name: String!
  createdBy: ID!
  goals: String
  invitations: [CreateInvitationsInput]
  engagementLevel: String
  teamInSync: String
  syncHistory: String
  members: [String]
  synchrony: Float
  performance: String
  sentiment: String
}

input CreateUserInput {
  sub: ID!
  username: String!
  email: String!
  status: String!
  onboarded: Boolean!
  resultPrivacy: Boolean!
  lastLogin: String
  avatar: String
  gender: String
  step: String
  dob: String
  phone: String
  firstName: String
  lastName: String
  country: String
  company: String
  position: String
}

input DeleteMeetingInput {
  id: ID!
}

input DeleteTeamInput {
  id: ID!
}

input DeleteUserInput {
  sub: ID!
}

type Invitations {
  email: String!
  message: String
  invited: Boolean!
}

type Meeting {
  id: ID!
  name: String!
  synchrony: String
  dimensions: String
  performance: String
  sentiment: String
  highlights: String
  url: String!
  thumbnail: String
  type: String!
  userId: String!
  teamId: String!
  date: String!
  createdAt: String!
  updatedAt: String!
}

type MeetingConnection {
  items: [Meeting]
  nextToken: String
}

input ModelSizeInput {
  ne: Int
  eq: Int
  le: Int
  lt: Int
  ge: Int
  gt: Int
  between: [Int]
}

input TableBooleanFilterInput {
  ne: Boolean
  eq: Boolean
  attributeExists: Boolean
}

input TableFloatFilterInput {
  ne: Float
  eq: Float
  le: Float
  lt: Float
  ge: Float
  gt: Float
  between: [Float]
  attributeExists: Boolean
}

input TableIDFilterInput {
  ne: ID
  eq: ID
  le: ID
  lt: ID
  ge: ID
  gt: ID
  contains: ID
  notContains: ID
  between: [ID]
  beginsWith: ID
  attributeExists: Boolean
  size: ModelSizeInput
}

input TableIntFilterInput {
  ne: Int
  eq: Int
  le: Int
  lt: Int
  ge: Int
  gt: Int
  between: [Int]
  attributeExists: Boolean
}

input TableMeetingFilterInput {
  id: TableIDFilterInput
  name: TableStringFilterInput
  synchrony: TableStringFilterInput
  dimensions: TableStringFilterInput
  performance: TableStringFilterInput
  sentiment: TableStringFilterInput
  highlights: TableStringFilterInput
  url: TableStringFilterInput
  thumbnail: TableStringFilterInput
  type: TableStringFilterInput
  userId: TableStringFilterInput
  teamId: TableStringFilterInput
  date: TableIntFilterInput
}

input TableStringFilterInput {
  ne: String
  eq: String
  le: String
  lt: String
  ge: String
  gt: String
  contains: String
  notContains: String
  between: [String]
  beginsWith: String
  attributeExists: Boolean
  size: ModelSizeInput
}

input TableTeamFilterInput {
  id: TableIDFilterInput
  name: TableStringFilterInput
  createdBy: TableIDFilterInput
  goals: TableStringFilterInput
  invitations: TableStringFilterInput
  engagementLevel: TableStringFilterInput
  teamInSync: TableStringFilterInput
  syncHistory: TableStringFilterInput
  members: TableStringFilterInput
  synchrony: TableFloatFilterInput
  performance: TableStringFilterInput
  sentiment: TableStringFilterInput
}

input TableUserFilterInput {
  sub: TableIDFilterInput
  username: TableStringFilterInput
  email: TableStringFilterInput
  status: TableStringFilterInput
  lastLogin: TableStringFilterInput
  avatar: TableStringFilterInput
  gender: TableStringFilterInput
  dob: TableStringFilterInput
  phone: TableStringFilterInput
  firstName: TableStringFilterInput
  lastName: TableStringFilterInput
  country: TableStringFilterInput
  company: TableStringFilterInput
  position: TableStringFilterInput
  resultPrivacy: TableBooleanFilterInput
  createdAt: TableStringFilterInput
  updatedAt: TableStringFilterInput
}

type Team {
  id: ID!
  name: String!
  createdBy: ID!
  goals: String
  invitations: [Invitations]
  engagementLevel: String
  teamInSync: String
  syncHistory: String
  members: [String]
  synchrony: Float
  performance: String
  sentiment: String
  createdAt: String!
  updatedAt: String!
}

type TeamConnection {
  items: [Team]
  nextToken: String
}

input UpdateInvitationsInput {
  email: String
  message: String
  invited: Boolean
}

input UpdateMeetingInput {
  id: ID!
  name: String
  synchrony: String
  dimensions: String
  performance: String
  sentiment: String
  highlights: String
  url: String
  thumbnail: String
  type: String
  userId: String
  teamId: String
  date: String
}

input UpdateTeamInput {
  id: ID!
  name: String
  createdBy: ID
  goals: String
  invitations: [UpdateInvitationsInput]
  engagementLevel: String
  teamInSync: String
  syncHistory: String
  members: [String]
  synchrony: Float
  performance: String
  sentiment: String
}

input UpdateUserInput {
  sub: ID!
  username: String
  email: String
  status: String
  lastLogin: String
  step: String
  onboarded: Boolean
  avatar: String
  gender: String
  dob: String
  phone: String
  firstName: String
  lastName: String
  country: String
  company: String
  position: String
  firstMeeting: String
  firstTeam: String
  resultPrivacy: Boolean
  updatedAt: String
}

type User {
  sub: ID!
  username: String!
  email: String!
  status: String!
  onboarded: Boolean!
  step: String!
  lastLogin: String
  avatar: String
  gender: String
  dob: String
  phone: String
  firstName: String
  lastName: String
  country: String
  company: String
  position: String
  resultPrivacy: Boolean!
  firstMeeting: String
  firstTeam: String
  createdAt: String!
  updatedAt: String!
}

type UserConnection {
  items: [User]
  nextToken: String
}

type Mutation {
  createUser(input: CreateUserInput!): User
  updateUser(input: UpdateUserInput!): User
  deleteUser(input: DeleteUserInput!): User
  createTeam(input: CreateTeamInput!): Team
  updateTeam(input: UpdateTeamInput!): Team
  deleteTeam(input: DeleteTeamInput!): Team
  createMeeting(input: CreateMeetingInput!): Meeting
  updateMeeting(input: UpdateMeetingInput!): Meeting
  deleteMeeting(input: DeleteMeetingInput!): Meeting
}

type Query {
  getUser(sub: ID!): User
  listUsers(
    filter: TableUserFilterInput
    limit: Int
    nextToken: String
  ): UserConnection
  getTeam(id: ID!): Team
  listTeams(
    filter: TableTeamFilterInput
    limit: Int
    nextToken: String
  ): TeamConnection
  listTeamsByUserId(
    userId: ID!
    filter: TableTeamFilterInput
    limit: Int
    nextToken: String
  ): TeamConnection
  getMeeting(id: ID!): Meeting
  listMeetings(
    filter: TableMeetingFilterInput
    limit: Int
    nextToken: String
  ): MeetingConnection
  listMeetingsByUserId(
    userId: ID!
    filter: TableMeetingFilterInput
    limit: Int
    nextToken: String
  ): MeetingConnection
}

type Subscription {
  onCreateUser(
    sub: ID
    username: String
    email: String
    status: String
    lastLogin: String
  ): User @aws_subscribe(mutations: ["createUser"])
  onUpdateUser(
    sub: ID
    username: String
    email: String
    status: String
    lastLogin: String
  ): User @aws_subscribe(mutations: ["updateUser"])
  onDeleteUser(
    sub: ID
    username: String
    email: String
    status: String
    lastLogin: String
  ): User @aws_subscribe(mutations: ["deleteUser"])
  onCreateTeam(
    id: ID
    name: String
    createdBy: ID
    goals: String
    invitations: String
  ): Team @aws_subscribe(mutations: ["createTeam"])
  onUpdateTeam(
    id: ID
    name: String
    createdBy: ID
    goals: String
    invitations: String
  ): Team @aws_subscribe(mutations: ["updateTeam"])
  onDeleteTeam(
    id: ID
    name: String
    createdBy: ID
    goals: String
    invitations: String
  ): Team @aws_subscribe(mutations: ["deleteTeam"])
  onCreateMeeting(
    id: ID
    name: String
    synchrony: String
    dimensions: String
    performance: String
  ): Meeting @aws_subscribe(mutations: ["createMeeting"])
  onUpdateMeeting(
    id: ID
    name: String
    synchrony: String
    dimensions: String
    performance: String
  ): Meeting @aws_subscribe(mutations: ["updateMeeting"])
  onDeleteMeeting(
    id: ID
    name: String
    synchrony: String
    dimensions: String
    performance: String
  ): Meeting @aws_subscribe(mutations: ["deleteMeeting"])
}
